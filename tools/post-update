#!/bin/sh
# 拉取server分支分代码到master分支；
# 通知中控机已收到代码；
export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
export HOME="/home/git"
export zPathOnHost="__PROJ_PATH"

# 当前hook执行过程中要去掉执行权限，防止以下的git操作触发hook无限循环
chmod a-x ${zPathOnHost}/.git/hooks/post-update

# 清除可能存在的由于 git 崩溃残留的锁文件
rm -f ${zPathOnHost}/.git/index.lock
rm -f ${zPathOnHost}_SHADOW/.git/index.lock

cd ${zPathOnHost}_SHADOW
export GIT_DIR="${zPathOnHost}_SHADOW/.git"
\ls -a | grep -Ev '^(\.|\.\.|\.git)$' | xargs rm -rf
git stash
git stash clear
git pull --force ./.git server:master >/dev/null 2>&1
git reset -q --hard  #git reset -q --hard `git log -1 server --format=%H`
if [[ 0 -ne $? ]]; then exit 255; fi

cd $zPathOnHost
export GIT_DIR="${zPathOnHost}/.git"
\ls -a | grep -Ev '^(\.|\.\.|\.git)$' | xargs rm -rf
git stash
git stash clear
git pull --force ./.git server:master >/dev/null 2>&1
git reset -q --hard  #git reset -q --hard `git log -1 server --format=%H`

# 校验布署结果
if [[ `cat ${zPathOnHost}_SHADOW/.____dp-SHA1.txt` != `find . | grep -vE '(^|/)\.git($|/)' | sort | cpio -o > ${zPathOnHost}_SHADOW/.____dp-SHA1.cpio && sha1sum ${zPathOnHost}_SHADOW/.____dp-SHA1.cpio | grep -oP '^\S+'` ]]; then exit 255; fi

# 'B' 用于标识这是布署状态回复，'A' 用于标识远程主机初始化状态回复
cd ${zPathOnHost}_SHADOW  # 务必切换路径，回复脚本内用了相对路径
echo -e "\n\n[`date`]" >> /tmp/.____post-deploy.log 2>&1
sh -x ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "B" >> /tmp/.____post-deploy.log 2>&1

# 布署完成之后需要执行的动作：<项目名称.sh>
(cd $zPathOnHost && sh __PROJ_PATH/____post-deploy.sh) &
# echo -e "\n\n\n\n#refresh date: `date`" >> __PROJ_PATH/____post-deploy.sh # 需要检验 md5，不能追加额外内容

# 如下部分用于保障相同 sig 可以连续布署，应对失败重试场景
cd $zPathOnHost
git commit --allow-empty -m "____Auto Commit By Deploy System____"
git push --force ./.git master:server >/dev/null 2>&1

# 自我更新
rm ${zPathOnHost}/.git/hooks/post-update
cp ${zPathOnHost}_SHADOW/tools/post-update ${zPathOnHost}/.git/hooks/post-update
chmod 0755 ${zPathOnHost}/.git/hooks/post-update

# 更新开机请求布署自身的脚本，设置为隐藏文件
mv ${zPathOnHost}_SHADOW/tools/____req-deploy.sh /home/git/.____req-deploy.sh
