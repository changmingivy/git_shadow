#!/usr/bin/env bash
#
# 拉取 server${ProjId} 分支分代码到 master 分支
# 通知中控机已收到代码
#

# [ DEBUG ]
printf "\n\n[`date`]" >> /tmp/.____post-deploy.log 2>&1

export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
export HOME=`cat /etc/passwd | grep "^\`whoami\`:" | awk -F: '{print $6}'`

# 由于 git push 会一直等待该勾子执行完毕才会返回，因此放在后台子进程中执行，以缩短两端连接的时间
# git push 完成之后传给 post-update 的参数数量与同批次推送的分支数量相同，
#     参数格式类似：refs/heads/server1 refs/heads/server1_SHADOW 的形式，
#     分支的先后顺序与推送方的指令顺序一致，分别对应 $1 $2 ...
(
    zPathOnHost="__PROJ_PATH"
    zMasterAddr="__MASTER_ADDR"
    zMasterPort="__MASTER_PORT"
    zProjOnLinePath="`dirname \`dirname \\\`dirname ${zPathOnHost}\\\`\``/`basename ${zPathOnHost}`"
    zProjId=`echo $1 | grep -oP '\d+$'`;
    if [[ "" == ${zProjId} ]]; then
        zProjId=`echo $1 | grep -oP '\d+(?=_SHADOW$)'`;
        if [[ "" == ${zProjId} ]]; then exit 255; fi
    fi
    zSelfIpStrAddr=`echo $1 | grep -oP '(?<=refs/heads/).*(?=server)' | sed 's/+/:/g'`;  # 传输过程中IPv6 地址中的冒号以 '+' 进行了替换，此处需要还原
    zServBranchName="`echo $1 | grep -oP '(?<=refs/heads/).*(?=server)'`server${zProjId}"  # 取 server${zProjId} 分支名称

    # 当前 hook 执行过程中要去掉执行权限，防止以下的git操作触发hook无限循环
    chmod 0444 ${zPathOnHost}/.git/hooks/post-update

    # 清理同一项目下可能存在的 post-update 进程
    kill -9 `cat /tmp/.${zProjId}_pid_post-update`

    # 清除可能存在的由于 git 崩溃残留的锁文件
    rm -f ${zPathOnHost}/.git/index.lock
    rm -f ${zPathOnHost}_SHADOW/.git/index.lock

    # 运行期间将自身 Pid 存入文件，用于防止同一项目的多个 post-update 进程并行带来混乱
    echo "$$" > /tmp/.${zProjId}_pid_post-update

    # 'B': 布署结果返回；'C': KeepAlive
    zTcpReply() {
        ${zPathOnHost}_SHADOW/tools/notice\
            "${zMasterAddr}"\
            "${zMasterPort}"\
            "{\"OpsId\":8,\"ProjId\":${zProjId},\"HostAddr\":\"${zSelfIpStrAddr}\",\"RevSig\":\"${1}\",\"TimeStamp\":${2},\"ReplyType\":\"${3}\",\"content\":\"${4}\"}"
    }

    ########################################
    # 进入项目代码库，获取最新接收的版本号 #
    ########################################
    cd $zPathOnHost
    if [[ 0 -ne $? ]]; then
        chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
        exit 255
    fi
    export GIT_DIR="${zPathOnHost}/.git"

    zServSig=`git log ${zServBranchName} -1 --format=%H`

    ############################################
    # 进入元数据库: 代码量可控，不必 KeepAlive #
    ############################################
    cd ${zPathOnHost}_SHADOW
    export GIT_DIR="${zPathOnHost}_SHADOW/.git"
    git checkout master
    git pull ${zPathOnHost}/.git ${zServBranchName}_SHADOW:master
    if [[ 0 -ne $? ]]; then
        \ls -a | grep -vE '^(\.|\.\.|\.git)$' | xargs rm -rf
        git stash
        git stash clear
        git pull --force ${zPathOnHost}/.git ${zServBranchName}_SHADOW:master 2>${zPathOnHost}_SHADOW/errlog
        if [[ 0 -ne $? ]]; then
            sed -i 's/[[:blank:]]\+/ /g' ${zPathOnHost}_SHADOW/errlog
            sed -i "s/\'/|/g" ${zPathOnHost}_SHADOW/errlog
            sed -i 's/"/|/g' ${zPathOnHost}_SHADOW/errlog
            sed -i "s/\n/;/g" ${zPathOnHost}_SHADOW/errlog
            zTcpReply "${zServSig}" "`date +%s`" "B-" "git pull failed, ${zPathOnHost}_SHADOW: `cat ${zPathOnHost}_SHADOW/errlog`"
            chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
            exit 255
        fi
    fi

    git reset --hard 2>${zPathOnHost}_SHADOW/errlog
    if [[ 0 -ne $? ]]; then
        sed -i 's/[[:blank:]]\+/ /g' ${zPathOnHost}_SHADOW/errlog
        sed -i "s/\'/|/g" ${zPathOnHost}_SHADOW/errlog
        sed -i 's/"/|/g' ${zPathOnHost}_SHADOW/errlog
        sed -i "s/\n/;/g" ${zPathOnHost}_SHADOW/errlog
        zTcpReply "${zServSig}" "`date +%s`" "B-" "git reset failed, ${zPathOnHost}_SHADOW: `cat ${zPathOnHost}_SHADOW/errlog`"
        chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
        exit 255
    fi

    # 获取本次动作对应的服务器端的时间戳
    zTimeStamp=`cat timestamp`
    if [[ 0 -ne $? ]];then zTimeStamp=-1; fi

    ############################
    # 进入项目代码库，执行布署 #
    ############################
    cd $zPathOnHost
    if [[ 0 -ne $? ]]; then
        chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
        exit 255
    fi
    export GIT_DIR="${zPathOnHost}/.git"
    git checkout master

    # 检测必要的路径下是存在权限异常的文件
    mkdir -p ${zProjOnLinePath} ${zPathOnHost} ${zPathOnHost}_SHADOW
    chown `whoami` ${zProjOnLinePath} ${zPathOnHost} ${zPathOnHost}_SHADOW 2>${zPathOnHost}_SHADOW/errlog
    if [[ 0 -ne $? ]]; then
        sed -i 's/[[:blank:]]\+/ /g' ${zPathOnHost}_SHADOW/errlog
        sed -i "s/\'/|/g" ${zPathOnHost}_SHADOW/errlog
        sed -i 's/"/|/g' ${zPathOnHost}_SHADOW/errlog
        sed -i "s/\n/;/g" ${zPathOnHost}_SHADOW/errlog
        zTcpReply "${zServSig}" "${zTimeStamp}" "B-" "permission denied, ${zProjOnLinePath} or `dirname ${zPathOnHost}`: `cat ${zPathOnHost}_SHADOW/errlog`"
        chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
        rmdir ${zProjOnLinePath} ${zPathOnHost} ${zPathOnHost}_SHADOW  # 权限无误，清除创建的空目录
        exit 255
    fi
    rmdir ${zProjOnLinePath} ${zPathOnHost} ${zPathOnHost}_SHADOW  # 权限无误，清除创建的空目录

    zTcpReply "${zServSig}" "${zTimeStamp}" "C" "" &  # KeepAlive
    git reset -q --hard ${zServBranchName}
    if [[ 0 -ne $? ]]; then
        # \ls -a | grep -vE '^(\.|\.\.|\.git)$' | xargs rm -rf
        git stash
        git stash clear
        git reset -q --hard ${zServBranchName} 2>${zPathOnHost}_SHADOW/errlog
        if [[ 0 -ne $? ]]; then
            sed -i 's/[[:blank:]]\+/ /g' ${zPathOnHost}_SHADOW/errlog
            sed -i "s/\'/|/g" ${zPathOnHost}_SHADOW/errlog
            sed -i 's/"/|/g' ${zPathOnHost}_SHADOW/errlog
            sed -i "s/\n/;/g" ${zPathOnHost}_SHADOW/errlog
            zTcpReply "${zServSig}" "${zTimeStamp}" "B-" "git reset failed, ${zPathOnHost}: `cat ${zPathOnHost}_SHADOW/errlog`"
            chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
            exit 255
        fi
    fi

    # 校验布署结果
    cd ../../`basename ${zPathOnHost}`/.git  # 兼容旧版项目库
    if [[ 0 -eq $? ]]; then
        cd ..
        export GIT_DIR="`pwd`/.git"
        git checkout master
        git pull --force ${zPathOnHost}/.git ${zServBranchName}:${zServBranchName}
        git reset -q --hard ${zServBranchName}
    else
        export GIT_DIR="${zPathOnHost}/.git"
    fi

    zMasterSig=`git log master -1 --format=%H`
    if [[ "$zMasterSig" != "$zServSig" ]]; then  # 检查两个分支 git log 是否一致
        zTcpReply "${zServSig}" "${zTimeStamp}" "B-" "code version inconsistent(git log): branch ${zServBranchName} != branch master"
        chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
        exit 255
    elif [[ 0 -ne "`git status --short --untracked-files=no | wc -l`" ]]; then  # 检查是否存在文件不一致现象(忽略未被 git 管理的新文件，如：log 等)
        zTcpReply "${zServSig}" "${zTimeStamp}" "B-" "work area inconsistent(git status): `pwd`"
        chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
        exit 255
    fi

    if [[ 0 -eq `ls -d ${zProjOnLinePath} | wc -l` ]]; then # 创建项目路径软链接
        ln -sT ${zPathOnHost} ${zProjOnLinePath}
        if [[ 0 -ne $? ]]; then
            zTcpReply "${zServSig}" "${zTimeStamp}" "B-" "创建软链接错误，请检查项目路径权限: ${zProjOnLinePath}"
            chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
            exit 255
        fi
    elif [[ ('l' != `ls -l ${zProjOnLinePath} | grep -o '^l'`) # 检测是否有废弃的残留文件，若存在，则抛出错误
        || ((${zPathOnHost} != `readlink -q ${zProjOnLinePath}`) && (`dirname \`dirname ${zPathOnHost}\``/`basename ${zPathOnHost}` != `readlink -q ${zProjOnLinePath}`)) ]]; then
        zTcpReply "${zServSig}" "${zTimeStamp}" "B-" "既存路径(或链接)与项目路径冲突，请手动删除后重试布署: ${zProjOnLinePath}"
        chmod 0755 ${zPathOnHost}/.git/hooks/post-update  # 退出之前还原权限
        exit 255
    fi

    rm -rf ${zProjOnLinePath}_SHADOW  # 清理可能存在的旧版布署系统的遗留文件

    # 更新开机自布署脚本，设置为隐藏文件
    cp ${zPathOnHost}_SHADOW/tools/____req-deploy.sh ${HOME}/.____req-deploy.sh

    # 执行用户自定义的布署后动作：____post-deploy.sh
    cd ${zProjOnLinePath}
    if [[ 0 -ne `\ls ${zPathOnHost}_SHADOW/____post-deploy.sh | wc -l` ]]; then
        chmod 0755 ${zPathOnHost}_SHADOW/____post-deploy.sh
        ${zPathOnHost}_SHADOW/____post-deploy.sh 2>${zPathOnHost}_SHADOW/errlog
        if [[ 0 -ne $? ]]; then
            sed -i 's/[[:blank:]]\+/ /g' ${zPathOnHost}_SHADOW/errlog
            sed -i "s/\'/|/g" ${zPathOnHost}_SHADOW/errlog
            sed -i 's/"/|/g' ${zPathOnHost}_SHADOW/errlog
            sed -i "s/\n/;/g" ${zPathOnHost}_SHADOW/errlog
            zTcpReply ${zMasterSig} ${zTimeStamp} "B-" "[cmd exec failed]: `cat ${zPathOnHost}_SHADOW/errlog`"
            exit 255
        fi
    fi

    if [[ 0 -ne `\ls ${zProjOnLinePath}/____post-deploy.sh | wc -l` ]]; then
        chmod 0755 ____post-deploy.sh
        ./____post-deploy.sh 2>${zPathOnHost}_SHADOW/errlog
        if [[ 0 -ne $? ]]; then
            sed -i 's/[[:blank:]]\+/ /g' ${zPathOnHost}_SHADOW/errlog
            sed -i "s/\'/|/g" ${zPathOnHost}_SHADOW/errlog
            sed -i 's/"/|/g' ${zPathOnHost}_SHADOW/errlog
            sed -i "s/\n/;/g" ${zPathOnHost}_SHADOW/errlog
            zTcpReply ${zMasterSig} ${zTimeStamp} "B-" "____post-deploy.sh failed: `cat ${zPathOnHost}_SHADOW/errlog`"
            exit 255
        fi
    fi

    ###########################################
    # 布署成功：'B+' 用于标识这是布署状态回复 #
    ###########################################
    zTcpReply ${zMasterSig} ${zTimeStamp} "B+" "" >> /tmp/.____post-deploy.log 2>&1

    # 退出之前还原权限
    chmod 0755 ${zPathOnHost}/.git/hooks/post-update

    # 运行完毕，正常终止的进程，最后删除自身对应的 pid 文件
    rm /tmp/.${zProjId}_pid_post-update
) &
