#!/bin/sh
# 拉取 server${ProjId} 分支分代码到 master 分支；
# 通知中控机已收到代码；
export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
export HOME="/home/git"

zPathOnHost="__PROJ_PATH"
zProjOnLinePath="`dirname \`dirname ${zPathOnHost}\``/`basename ${zPathOnHost}`"

# 检测必要的路径下是存在权限异常的文件
mkdir -p ${zProjOnLinePath} ${zPathOnHost} ${zPathOnHost}_OnLine ${zPathOnHost}_SHADOW
chown -R git:git ${zProjOnLinePath} ${zPathOnHost} ${zPathOnHost}_OnLine ${zPathOnHost}_SHADOW
if [[ 0 -ne $? ]]; then
    sh ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "D" "permision denied: ${zProjOnLinePath} ${zPathOnHost} ${zPathOnHost}_OnLine ${zPathOnHost}_SHADOW"
    exit 255
fi

# 当前hook执行过程中要去掉执行权限，防止以下的git操作触发hook无限循环
chmod 0444 ${zPathOnHost}_SHADOW/.git/hooks/post-update

# 清除可能存在的由于 git 崩溃残留的锁文件
# rm -f ${zPathOnHost}/.git/index.lock
# rm -f ${zPathOnHost}_SHADOW/.git/index.lock

# 元数据布署
cd ${zPathOnHost}_SHADOW
export GIT_DIR="${zPathOnHost}_SHADOW/.git"
zServBranchName="`git branch | grep -oP 'server\d+'`"  # 取 server${zProjId} 分支名称
\ls -a | grep -vE '^(\.|\.\.|\.git)$' | xargs rm -rf
git stash
git stash clear
sh ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "C" "_" & # KeepAlive
git pull --force ./.git ${zServBranchName}:master >/dev/null 2>&1
sh ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "C" "_" & # KeepAlive
git reset -q --hard `git log -1 ${zServBranchName} --format=%H`
if [[ 0 -ne $? ]]; then
    sh ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "D" "git reset failed: ${zPathOnHost}_SHADOW"
    exit 255
fi

# 项目数据布署
cd $zPathOnHost
export GIT_DIR="${zPathOnHost}/.git"
\ls -a | grep -vE '^(\.|\.\.|\.git)$' | xargs rm -rf
git stash
git stash clear
sh -x ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "C" "_" >> /tmp/.____post-deploy.log 2>&1 & # KeepAlive
git pull --force ./.git ${zServBranchName}:master >/dev/null 2>&1
git reset -q --hard `git log -1 ${zServBranchName} --format=%H`
if [[ 0 -ne $? ]]; then
    sh ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "D" "git reset failed: ${zPathOnHost}"
    exit 255
fi

# 校验布署结果
# cd ${zPathOnHost}
# export GIT_DIR="${zPathOnHost}/.git"
zMasterSig=`git log master -1 --format=%H`
zServerSig=`git log ${zServBranchName} -1 --format=%H`
sh -x ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "C" "_" >> /tmp/.____post-deploy.log 2>&1 & # KeepAlive
if [[ $zMasterSig != $zServerSig ]]; then
    sh ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "D" "git log inconsistent: branch ${zServBranchName} != branch master"
    chmod 0777 ${zPathOnHost}_SHADOW/.git/hooks/post-update  # 退出之前还原权限
    exit 255
elif [[ 0 -ne `git status --short | wc -l` ]]; then
    sh ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "D" "work area inconsistent(git status): ${zPathOnHost}"
    chmod 0777 ${zPathOnHost}_SHADOW/.git/hooks/post-update  # 退出之前还原权限
    exit 255
elif [[ `cat ${zPathOnHost}_SHADOW/.____dp-SHA1.res` != `find . -path './.git' -prune -o -type f -print | fgrep -v ' ' | sort | xargs cat | sha1sum | grep -oP '^\S+'` ]]; then
    sh ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "D" "full sha1sum failed: ${zPathOnHost}"
    chmod 0777 ${zPathOnHost}_SHADOW/.git/hooks/post-update  # 退出之前还原权限
    exit 255
fi

# 'B' 用于标识这是布署状态回复，'A' 用于标识远程主机初始化状态回复
cd ${zPathOnHost}_SHADOW  # 务必切换路径，回复脚本内用了相对路径
printf "\n\n[`date`]" >> /tmp/.____post-deploy.log 2>&1
sh -x ./tools/zclient_reply.sh "__MASTER_ADDR" "__MASTER_PORT" "B" "${zMasterSig}" >> /tmp/.____post-deploy.log 2>&1

# 其它额外的动作
sh -x ${zPathOnHost}_SHADOW/tools/zpost-update.sh ${zPathOnHost} ${zProjOnLinePath} ${zServBranchName} >/tmp/zpost-update.log 2>/tmp/zpost-update.err &

# 更新 post-update
cp -f ${zPathOnHost}_SHADOW/tools/post-update ${zPathOnHost}_SHADOW/.git/hooks/post-update
chmod 0777 ${zPathOnHost}_SHADOW/.git/hooks/post-update

# 更新开机请求布署自身的脚本，设置为隐藏文件
cp ${zPathOnHost}_SHADOW/tools/____req-deploy.sh /home/git/.____req-deploy.sh
